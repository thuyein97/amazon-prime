# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Install dependencies
      run: npm install
  security-check:
    runs-on: ubuntu-latest
    needs: compile
    steps:
    - uses: actions/checkout@v4
    - name: Generate Trivy Vulnerability Report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: "fs"
        output: trivy-report.json
        format: json
        scan-ref: .
        exit-code: 1
        severity: 'CRITICAL,HIGH'
    - name: Upload Vulnerability Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-report
        path: trivy-report.json
        retention-days: 30

  build_scan:
    environment: dev
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    # - name: SonarQube Scan
    #   uses: SonarSource/sonarqube-scan-action@v5.3.1
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
    # - name: SonarQube Quality Gate check
    #   id: sonarqube-quality-gate-check
    #   uses: sonarsource/sonarqube-quality-gate-action@master
    #   with:
    #     pollingTimeoutSec: 600
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
  build_docker_push:
    environment: dev
    runs-on: ubuntu-latest
    needs: security-check
    steps:
    - uses: actions/checkout@v4
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    -
      name: Build and push
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}:latest
        context: .
        file: ./Dockerfile
    - name: Run Trivy vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ vars.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}:latest'
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
    - name: Checkout GitOps repo
      uses: actions/checkout@v4
      with:
          repository: ${{ vars.GITOPS_REPO }}
          token: ${{ secrets.GITOPS_PAT }}  # PAT with write access

    - name: Install kustomize
      run: |
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.1/kustomize_v5.4.1_linux_amd64.tar.gz
          tar -xzf kustomize
          sudo mv kustomize /usr/local/bin/

    - name: Update image tag in GitOps repo
      run: |
          cd gitops/overlays/dev
          kustomize edit set image ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}=${{ vars.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}:${{ github.run_number }}
          git config user.name "ci-bot"
          git config user.email "ci-bot@users.noreply.github.com"
          git commit -am "Update ${{ vars.IMAGE_NAME }} to ${{ github.run_number }}"
          git push
#   deploy_to_kubernetes:
#     runs-on: self-hosted
#     needs: build_docker_push
#     steps:
#           - name: Checkout Code
#             uses: actions/checkout@v4
#           - name: Configure AWS credentials
#             uses: aws-actions/configure-aws-credentials@v2
#             with:
#               aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#               aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#               aws-region: ap-east-1
#           - name: Set up kubectl
#             uses: azure/setup-kubectl@v3
#             with:
#               version: latest
#           - name: Configure kubeconfig
#             run: |
#               mkdir -p $HOME/.kube
#               echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config
#           - name: Deploy to EKS
#             run: |
#               kubectl apply -f ds.yml    
      

